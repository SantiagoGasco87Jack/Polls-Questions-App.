// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  comments      Comment[]
  commentVotes  CommentVote[]
  posts         Post[]
  postVotes     PostVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostType {
  // Multiple-choice poll. Only the creator can modify the poll?
  MULTIPLE_CHOICE

  // Multiple-choice image poll. Only the creator can modify the poll.
  IMAGE_POLL
}

// TODO(acorn1010): Add option to fork a poll.
model Post {
  id               String   @id @default(cuid())
  title            String
  description      String?  @db.Text
  type             PostType
  isMultipleChoice Boolean
  upvoteCount      Int
  downvoteCount    Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  postVotes PostVote[]
}

// Comments made on a post.
model Comment {
  id            String   @id @default(cuid())
  message       String?  @db.Text
  upvoteCount   Int
  downvoteCount Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  commentVotes CommentVote[]
}

model CommentVote {
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  commentId String
  userId    String

  @@unique([commentId, userId])
}

model PostVote {
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  userId String

  @@unique([postId, userId])
}
