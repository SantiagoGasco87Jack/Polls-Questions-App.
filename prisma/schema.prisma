// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime         @default(now())
  comments        Comment[]
  commentVotes    CommentVote[]
  posts           Post[]
  postVotes       PostVote[]
  moderatorTopics TopicToUser[]
  PollOptionVote  PollOptionVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model TopicToUser {
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId String
  userId  String
  // TODO(acorn1010): Add permissions. By default, they have all permissions.

  @@id([topicId, userId])
}

// A topic, such as "acorn1010" or "foony". A "topic" has multiple "posts" in it.
model Topic {
  id        String   @id
  createdAt DateTime @default(now())

  moderators TopicToUser[]
  Post       Post[]
}

enum PostType {
  // Multiple-choice poll. Only the creator can modify the poll?
  MULTIPLE_CHOICE

  // Multiple-choice image poll. Only the creator can modify the poll.
  IMAGE_POLL
}

model PollOption {
  id String @id @default(cuid())

  // Image source, if any (e.g. "https://foony.com/img/games/wordhunt/logo.avif")
  srcUri String? @db.Text

  // Text to show for this poll, if any. (either srcUri or text will exist)
  text String?

  upvoteCount   Int @default(0)
  downvoteCount Int @default(0)

  Post           Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         String
  PollOptionVote PollOptionVote[]
}

// TODO(acorn1010): Add option to fork a poll.
model Post {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  type          PostType
  // If true, multiple poll options can be selected for each user.
  // isMultipleChoice Boolean
  upvoteCount   Int      @default(0)
  downvoteCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  options PollOption[]

  pollOptionVotes PollOptionVote[]

  postVotes PostVote[]

  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String
}

// Comments made on a post.
model Comment {
  id            String   @id @default(cuid())
  message       String?  @db.Text
  upvoteCount   Int      @default(0)
  downvoteCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  parentId String?
  parent   Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("Replies")

  commentVotes CommentVote[]
}

model CommentVote {
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  commentId String
  userId    String
  // True if this CommentVote is an upvote. Else a downvote.
  isUpvote  Boolean

  @@id([commentId, userId])
}

// An upvote / downvote on a poll option. This 
model PollOptionVote {
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollOption PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  postId       String
  pollOptionId String
  userId       String

  @@id([postId, userId])
}

// An upvote / downvote on a post.
model PostVote {
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId   String
  userId   String
  // True if this PostVote is an upvote. Else a downvote.
  isUpvote Boolean

  @@id([postId, userId])
}
